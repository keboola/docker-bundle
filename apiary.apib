FORMAT: 1A
HOST: https://syrup.keboola.com/docker/

# Docker Runner
Docker Runner is a Keboola service, that runs Docker containers as workers in Keboola Connection jobs.

# Group Encrypt

Encrypts a string or a JSON

## Encryption [/encrypt?componentId={componentId}&projectId={projectId}]

Used for encrypting string values or JSON data. Deprecates all other encryption methods.

+ Parameters
    + componentId(optional, string) ... Keboola Connection Component Id
    + projectId(optional, string) ... Keboola Connection Project Id

If any of the `componentId` or `projectId` is specified, a suitable encryptor is selected, so that the encrypted
value can be decrypted only in an environment matching the parameters.

### Encrypt data [POST]

+ Request Encrypt plain text (text/plain)
    + Body

            MyStringToBeEncrypted

+ Response 200 (text/plain)

        KBC::Encrypted==ENCODEDSTRING==

+ Request Encrypt JSON structure (application/json)
    + Body

            {
                "config": 1,
                "#test": "MyValueToBeEncrypted"
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::Encrypted==ENCODEDSTRING=="
            }

## DEPRECATED Image encryption [/{image}/encrypt]

Used for encrypting values in image specification. Cipher text can be decrypted only in the specified image.


+ Parameters
    + image (string) ... KBC component Id

### Encrypt data [POST]

+ Request Encrypt plain text (text/plain)
    + Body

            abcd

+ Response 200 (text/plain)

        KBC::ComponentEncrypted==ENCODEDSTRING==

+ Request Encrypt JSON structure (application/json)
    + Body

            {
                "config": 1,
                "#test": "aabb"
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::ComponentEncrypted==ENCODEDSTRING=="
            }

## DEPRECATED Image configuration encryption [/{image}/configs/encrypt]

Used for encrypting values in image configuration. Cipher text can be decrypted only in the specified image
only in the specified project - specified in StorageAPI token.  


+ Parameters
    + image (string) ... KBC component Id

### Encrypt data [POST]

+ Request Encrypt plain text (text/plain)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            abcd

+ Response 200 (text/plain)

        KBC::ComponentProjectEncrypted==ENCODEDSTRING==

+ Request Encrypt JSON structure (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": 1,
                "#test": "aabb"
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::ComponentProjectEncrypted==ENCODEDSTRING=="
            }

## DEPRECATED Encrypt and store configuration [/{image}/configs/{configId}]

Wrapper for a native Storage API call, that encrypts (image configuration encryption is used) values before saving them.
1:1 compatible with http://docs.keboola.apiary.io/#reference/components/manage-configs/update-config


+ Parameters
    + image (string) ... KBC component Id
    + configId (string) ... Configuration ID

### Save configuration [PUT]

+ Request Save configuration (multipart/form-data; boundary=----WebKitFormBoundaryfIBRqd05C6Na2Lvl)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="name"
            testing-encrypt
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="description"
            Test
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="configuration"
            {
                "parameters": {
                    "plain": "test",
                    "#encrypted": "test"
                }
            }
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="state"
            []
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl--


+ Response 200 (application/json)

            {
              "id": "1",
              "name": "testing-encrypt",
              "description": "Test",
              "created": "2015-10-15T07:52:15+0200",
              "creatorToken": {
                "id": 11024,
                "description": "ondrej.hlavacek@keboola.com"
              },
              "version": 5,
              "changeDescription": null,
              "configuration": {
                "parameters": {
                  "plain": "test",
                  "#encrypted": "KBC::ComponentProjectEncrypted==VDeKlsVo8+eqg5afhZd/zDBun9Al1jUoynx7QrBpMZiZbI3vcLNjpLRXMyT4oTFSMj9Irb2ipXVmI0wJr4O1/A=="
                }
              },
              "state": []
            }

+ Request Encrypt JSON structure (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": 1,
                "#test": "aabb"
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::ComponentProjectEncrypted==ENCODEDSTRING=="
            }



# Group Run

Run a configuration of a component.

## Create a job [/{component}/run]

Create an execution job on a specified component.

+ Parameters
    + component (string) ... KBC component Id

### Run job [POST]

+ Request Stored configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": "next-order-1"
            }

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ],
                            "tables": [
                                {
                                    "source": "in.c-redshift.table1",
                                    "destination": "table1.csv"
                                },
                                {
                                    "source": "in.c-redshift.some-table",
                                    "destination": "table2.csv"
                                }
                            ]
                        },
                        "output": {
                            "files": [
                                {
                                    "source": "file.csv",
                                    "tags": [
                                        "processed-file",
                                        "csv"
                                    ]
                                }
                            ],
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                    "runtime": {
                        "baz": "bar"
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }

## Create a job with image [/{component}/run/tag/{tag}]

Create an execution job on a specified component while using a specific image tag.

+ Parameters
    + component (string) - KBC component Id
    + tag (string) - Docker image tag to be used

### Run job [POST]

+ Request Stored configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": "next-order-1"
            }

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ]
                        },
                        "output": {
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                    "runtime": {
                        "baz": "bar"
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }

# Group Sandbox

Sandbox call are handy when developing or troubleshooting Docker images.
They can dump the `data` folder for you before running the image, before uploading the results back to Storage or event without even having the image configured.

## Sandbox [/sandbox]

This job will prepare the `data` folder including serialized configuration file in the given format.
Then it will compress the `data` folder and upload it to your project's File Uploads in Storage.
This call is useful when developing new Docker component to obtain a sample of the development environment.

Sandbox only supports custom configuration as the image is not specified and the configuration is not fixed, everything you put in the configuration will be copied to the configuration file inside the `data`folder.

Note: only 50 first rows of each table will be exported.

### Create a Sandbox job [POST]

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ],
                            "tables": [
                                {
                                    "source": "in.c-redshift.table1",
                                    "destination": "table1.csv"
                                },
                                {
                                    "source": "in.c-redshift.some-table",
                                    "destination": "table2.csv"
                                }
                            ]
                        },
                        "output": {
                            "files": [
                                {
                                    "source": "file.csv",
                                    "tags": [
                                        "processed-file",
                                        "csv"
                                    ]
                                }
                            ],
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }


## Input data [/{image}/input]

This job will prepare the `data` folder including serialized configuration file in format set in the image configuration.
Then it will compress the `data` folder and upload it to your project's File Uploads in Storage.
**The image itself will not be downloaded nor executed.**


This API call is useful for verifying that a given input mapping and image configuration are working correctly and as a simple dumping tool for troubleshooting Docker apps.

+ Parameters
    + image (string) ... KBC component Id

### Create an Input job [POST]

+ Request Stored configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": "next-order-1"
            }

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ],
                            "tables": [
                                {
                                    "source": "in.c-redshift.table1",
                                    "destination": "table1.csv"
                                },
                                {
                                    "source": "in.c-redshift.some-table",
                                    "destination": "table2.csv"
                                }
                            ]
                        },
                        "output": {
                            "files": [
                                {
                                    "source": "file.csv",
                                    "tags": [
                                        "processed-file",
                                        "csv"
                                    ]
                                }
                            ],
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }


## Dry Run [/{image}/dry-run]

This job will prepare the `data` folder including serialized configuration file in format set in the image configuration.
Then it will execute the Docker image and compress the `data` folder including the results and upload it to your project's File Uploads in Storage.

This API call is useful for verifying that the given image is producing the correct output without altering the real data in your KBC project.

Note that the archive will contain all files in the `data` folder including any temporary files produced be the Docker image.

+ Parameters
    + image (string) ... KBC component Id

### Create a Dry Run job [POST]

+ Request Stored configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": "next-order-1"
            }

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ],
                            "tables": [
                                {
                                    "source": "in.c-redshift.table1",
                                    "destination": "table1.csv"
                                },
                                {
                                    "source": "in.c-redshift.some-table",
                                    "destination": "table2.csv"
                                }
                            ]
                        },
                        "output": {
                            "files": [
                                {
                                    "source": "file.csv",
                                    "tags": [
                                        "processed-file",
                                        "csv"
                                    ]
                                }
                            ],
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }


# Group Actions

Runs a Docker image synchronously, waits for the result and returns as response. Please call this part of API on https://docker-runner.keboola.com/.

## Run custom Docker extension action [/{image}/action/{action}]

+ Parameters
    + image (string) ... KBC component Id
    + action (string) ... Action name

### Process action [POST]

The body attribute `configData` contains component configuration.
You need to provide the whole configuration, linking a stored configuration is not supported.

+ Request Process action (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "parameters": {}
                }
            }

+ Response 200 (application/json)

            {
                "response": 1
            }
