FORMAT: 1A
HOST: https://syrup.keboola.com/docker/

# Docker Runner
Docker Runner is a Keboola service, that runs Docker containers as workers in Keboola Connection jobs. See the [Developer documentation](https://developers.keboola.com/extend/docker-runner/) for overview of the service and integration options. This API description assumes using the US region KBC stack, if you are using other stacks, you need to use the [correct URL](https://developers.keboola.com/overview/api/#regions-and-endpoints).

# Group Encrypt

Encryption docs moved to [new location](https://keboolaencryption.docs.apiary.io/#).

## Encryption Migration [/migrate?componentId={componentId}&projectId={projectId}&configId={configId}]

Used to migrate legacy ciphers (KBC::XXXEncrypted==) to new format (KBC::XXXSecure::).

If any of the `projectId` or `configId` is specified, a suitable encryptor is selected (`KBC::ComponentSecure::`,
`KBC::ProjectSecure::` or `KBC::ConfigSecure::`), so that the encrypted
value can be decrypted only in an environment matching the parameters.

+ Parameters
    + componentId(required, string) ... Keboola Connection Component Id
    + projectId(optional, string) ... Keboola Connection Project Id
    + configId(optional, string) ... Keboola Connection Configuration Id (when used, `projectId` must also be specified)

### Convert Ciphers [POST]

+ Request Encrypt plain text (text/plain)
    + Body

            KBC::Encrypted==ENCODEDSTRING==

+ Response 200 (text/plain)

        KBC::ProjectSecure::ENCODEDSTRING==

+ Request Encrypt JSON structure (application/json)
    + Body

            {
                "config": 1,
                "#test": "KBC::Encrypted==ENCODEDSTRING=="
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::ProjectSecure::ENCODEDSTRING=="
            }


## Legacy Encryption [/encrypt?componentId={componentId}&projectId={projectId}]

Used for encrypting string values or JSON data. Deprecates all other encryption methods.

If any of the `componentId` or `projectId` is specified, a suitable encryptor is selected, so that the encrypted
value can be decrypted only in an environment matching the parameters.

+ Parameters
    + componentId(optional, string) ... Keboola Connection Component Id
    + projectId(optional, string) ... Keboola Connection Project Id

### Encrypt data [POST]

+ Request Encrypt plain text (text/plain)
    + Body

            MyStringToBeEncrypted

+ Response 200 (text/plain)

        KBC::Encrypted==ENCODEDSTRING==

+ Request Encrypt JSON structure (application/json)
    + Body

            {
                "config": 1,
                "#test": "MyValueToBeEncrypted"
            }

+ Response 200 (application/json)

            {
                "config": 1,
                "#test": "KBC::Encrypted==ENCODEDSTRING=="
            }

## DEPRECATED Image encryption [/{image}/encrypt]

Used for encrypting values in image specification. Cipher text can be decrypted only in the specified image.


+ Parameters
    + image (string) ... KBC component Id

### Encrypt data [POST]

+ Request Encrypt plain text (text/plain)
    + Body

            abcd

+ Response 200 (text/plain)

        KBC::ComponentEncrypted==ENCODEDSTRING==

+ Request Encrypt JSON structure (application/json)
    + Body

            {
                "config": 1,
                "#test": "aabb"
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::ComponentEncrypted==ENCODEDSTRING=="
            }

## DEPRECATED Image configuration encryption [/{image}/configs/encrypt]

Used for encrypting values in image configuration. Cipher text can be decrypted only in the specified image
only in the specified project - specified in StorageAPI token.


+ Parameters
    + image (string) ... KBC component Id

### Encrypt data [POST]

+ Request Encrypt plain text (text/plain)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            abcd

+ Response 200 (text/plain)

        KBC::ComponentProjectEncrypted==ENCODEDSTRING==

+ Request Encrypt JSON structure (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": 1,
                "#test": "aabb"
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::ComponentProjectEncrypted==ENCODEDSTRING=="
            }

## DEPRECATED Encrypt and store configuration [/{image}/configs/{configId}]

Wrapper for a native Storage API call, that encrypts (image configuration encryption is used) values before saving them.
1:1 compatible with http://docs.keboola.apiary.io/#reference/components/manage-configs/update-config


+ Parameters
    + image (string) ... KBC component Id
    + configId (string) ... Configuration ID

### Save configuration [PUT]

+ Request Save configuration (multipart/form-data; boundary=----WebKitFormBoundaryfIBRqd05C6Na2Lvl)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="name"
            testing-encrypt
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="description"
            Test
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="configuration"
            {
                "parameters": {
                    "plain": "test",
                    "#encrypted": "test"
                }
            }
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl
            Content-Disposition: form-data; name="state"
            []
            ------WebKitFormBoundaryfIBRqd05C6Na2Lvl--


+ Response 200 (application/json)

            {
              "id": "1",
              "name": "testing-encrypt",
              "description": "Test",
              "created": "2015-10-15T07:52:15+0200",
              "creatorToken": {
                "id": 11024,
                "description": "ondrej.hlavacek@keboola.com"
              },
              "version": 5,
              "changeDescription": null,
              "configuration": {
                "parameters": {
                  "plain": "test",
                  "#encrypted": "KBC::ComponentProjectEncrypted==VDeKlsVo8+eqg5afhZd/zDBun9Al1jUoynx7QrBpMZiZbI3vcLNjpLRXMyT4oTFSMj9Irb2ipXVmI0wJr4O1/A=="
                }
              },
              "state": []
            }

+ Request Encrypt JSON structure (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": 1,
                "#test": "aabb"
            }

+ Response 202 (application/json)

            {
                "config": 1,
                "#test": "KBC::ComponentProjectEncrypted==ENCODEDSTRING=="
            }


# Group Run

Run a configuration of a component. The configuration is specified either in `config` or `configData` property of the request body.
The `config` property contains the Id of an existing configuration. When you want to run a inline defined configuration, use the
`configData` property to specify the entire configuration.
One of `config` or `configData` must always be specified.
If both `config` and `configData` are specified, then `config` is only used in conjunction with `default_bucket`
option to resolve the bucket name for output mapping.

When the `config` property is specified, a configuration with multiple rows can also use the `row` property to specify a single row to be executed.
This setting will also override the `isDisabled` property of the configuration row.
That means that it will execute a disabled configuration row.

## Create a job [/{component}/run]

Create an execution job on a specified component.

+ Parameters
    + component (string) ... KBC component Id

### Run job [POST]

+ Request Stored configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": "next-order-1",
                "row": "my-row"
            }

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ],
                            "tables": [
                                {
                                    "source": "in.c-redshift.table1",
                                    "destination": "table1.csv"
                                },
                                {
                                    "source": "in.c-redshift.some-table",
                                    "destination": "table2.csv"
                                }
                            ]
                        },
                        "output": {
                            "files": [
                                {
                                    "source": "file.csv",
                                    "tags": [
                                        "processed-file",
                                        "csv"
                                    ]
                                }
                            ],
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                    "runtime": {
                        "baz": "bar"
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }

## Create a job with image [/{component}/run/tag/{tag}]

Create an execution job on a specified component while using a specific image tag.

+ Parameters
    + component (string) - KBC component Id
    + tag (string) - Docker image tag to be used

### Run job [POST]

+ Request Stored configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": "next-order-1",
                "row": "my-row"
            }

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ]
                        },
                        "output": {
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                    "runtime": {
                        "baz": "bar"
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }

# Group Debug

Debug API call is handy when developing or troubleshooting components.

## Debug Component [/{componentId}/debug]

This job will prepare the `data` folder including the serialized configuration files. Then it will compress
the `data` folder and upload it to your project's Files in Storage. This way you will get a snapshot of what
the `data` folder looked like before the component started. After the component finishes, another snapshot is made.

If processors are used, a snapshot of the data folder is created before each processor.

If configuration rows are used, a snapshot is created for each configuration row.

This API call does not upload any tables or files to Storage. I.e. when the component finishes, its output is 
discarded and the output mapping to storage is **not done**. This makes this API call generally very safe to call, because
it cannot break the KBC project in any way. However keep in mind, that if the component has any outside sideeffects, these
will get executed. This applies typically to writers which will write the data into the external system even with this debug API call.

Note that the snapshot archive will contain all files in the `data` folder including any temporary files produced be the component.

+ Parameters
    + componentId (string) ... KBC component Id

### Create an Input job [POST]

+ Request Stored configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "config": "next-order-1",
                "row": "my-row"
            }

+ Request Custom configuration (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "storage": {
                        "input": {
                            "files": [
                                {
                                    "query": "name: testfile.png"
                                }
                            ],
                            "tables": [
                                {
                                    "source": "in.c-redshift.table1",
                                    "destination": "table1.csv"
                                },
                                {
                                    "source": "in.c-redshift.some-table",
                                    "destination": "table2.csv"
                                }
                            ]
                        },
                        "output": {
                            "files": [
                                {
                                    "source": "file.csv",
                                    "tags": [
                                        "processed-file",
                                        "csv"
                                    ]
                                }
                            ],
                            "tables": [
                                {
                                    "source": "sliced.csv",
                                    "destination": "out.c-main.data"
                                }
                            ]
                        }
                    },
                    "parameters": {
                        "foo": "bar",
                        "script": null
                    }
                }
            }

+ Response 202 (application/json)

        {
            "id": "67121676",
            "url": "https://syrup.keboola.com/queue/job/67121676",
            "status": "waiting"
        }

# Group Actions

Runs a Docker image synchronously, waits for the result and returns as response. This part of the API has different base URL! On the US stack it is https://docker-runner.keboola.com/.
If you are using other stacks, you need to use the [correct URL](https://developers.keboola.com/overview/api/#regions-and-endpoints).

## Run custom component action [/{image}/action/{action}]

+ Parameters
    + image (string) ... KBC component Id
    + action (string) ... Action name

### Process action [POST]

The body attribute `configData` contains component configuration.
You need to provide the whole configuration, linking a stored configuration is not supported.

+ Request Process action (application/json)
    + Headers

            X-StorageApi-Token: 123456

    + Body

            {
                "configData": {
                    "parameters": {}
                }
            }

+ Response 200 (application/json)

            {
                "response": 1
            }
