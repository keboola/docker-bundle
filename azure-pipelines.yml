pr: none
trigger:
  batch: true
  branches:
    include:
      - '*'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: beforeTests
    displayName: 'Before Tests'
    jobs:
      - job: prepare
        displayName: Prepare
        steps:
          - script: docker-compose build
            displayName: 'Build Image'

          - script: docker-compose run tests composer check
            displayName: 'Static check'

  - stage: Tests
    dependsOn: beforeTests
    jobs:
      - job: baseTests
        displayName: 'Base Tests'
        steps:
          - script: |
              docker-compose run tests ./vendor/bin/phpunit --testsuite base-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: containerTests
        displayName: 'Container Tests'
        pool:
          name: 'Default'
        steps:
          - script: |
              ip -4 addr show
              chmod a+rwx /tmp/
              docker-compose run host-tests ./vendor/bin/phpunit --testsuite container-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: runnerTests
        displayName: 'Runner Tests'
        timeoutInMinutes: 100
        steps:
          - script: |
              docker-compose build --pull
              docker-compose run tests ./vendor/bin/phpunit --testsuite runner-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              STORAGE_API_TOKEN_FEATURE_NATIVE_TYPES: $(STORAGE_API_TOKEN_FEATURE_NATIVE_TYPES)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: runnerTestsPart2
        displayName: 'Runner Tests Part 2'
        pool:
          name: 'Default'
        steps:
          - script: |
              docker-compose build --pull
              chmod a+rwx /tmp/
              docker-compose run tests ./vendor/bin/phpunit --testsuite runner-tests-2
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: s3Tests
        displayName: 'S3 Tests'
        steps:
          - script: |
              docker-compose run tests ./vendor/bin/phpunit --testsuite s3-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: absTests
        displayName: 'ABS Tests'
        steps:
          - script: |
              docker-compose run tests ./vendor/bin/phpunit --testsuite abs-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: gcsTests
        displayName: 'GCS Tests'
        steps:
          - script: |
              docker-compose run -e STORAGE_API_URL=$STORAGE_API_URL_CONTROL_PLANE tests ./vendor/bin/phpunit --testsuite gcs-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN_CONTROL_PLANE)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              STORAGE_API_TOKEN_CONTROL_PLANE: $(STORAGE_API_TOKEN_CONTROL_PLANE)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: synapseTests
        displayName: 'Synapse Tests'
        condition: eq(variables.RUN_SYNAPSE_TESTS, '1')
        steps:
          - script: |
              docker-compose run -e STORAGE_API_URL=$STORAGE_API_URL_SYNAPSE tests ./vendor/bin/phpunit --testsuite synapse-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: exasolTests
        displayName: 'Exasol Tests'
        condition: eq(variables.RUN_EXASOL_TESTS, '1')
        steps:
          - script: |
              docker-compose run -e STORAGE_API_URL=$STORAGE_API_URL_EXASOL tests ./vendor/bin/phpunit --testsuite exasol-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN_EXASOL)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: redshiftTests
        displayName: 'Redshift Tests'
        steps:
          - script: |
              docker-compose run tests ./vendor/bin/phpunit --testsuite redshift-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_SYNAPSE: $(STORAGE_API_TOKEN_SYNAPSE)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: teradataTests
        displayName: 'Teradata Tests'
        condition: eq(variables.RUN_TERADATA_TESTS, '1')
        steps:
          - script: |
              docker-compose run -e STORAGE_API_URL=$STORAGE_API_URL_TERADATA tests ./vendor/bin/phpunit --testsuite teradata-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN_TERADATA)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)

      - job: bigqueryTests
        displayName: 'BiqQuery Tests'
        condition: eq(variables.RUN_BIGQUERY_TESTS, '1')
        steps:
          - script: |
              docker-compose run -e STORAGE_API_URL=$STORAGE_API_URL_BIGQUERY tests ./vendor/bin/phpunit --testsuite bigquery-tests
            env:
              AWS_ECR_SECRET_ACCESS_KEY: $(AWS_ECR_SECRET_ACCESS_KEY)
              DOCKERHUB_PRIVATE_PASSWORD: $(DOCKERHUB_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_PASSWORD: $(QUAYIO_PRIVATE_PASSWORD)
              QUAYIO_PRIVATE_USERNAME: $(QUAYIO_PRIVATE_USERNAME)
              STORAGE_API_TOKEN: $(STORAGE_API_TOKEN_BIGQUERY)
              STORAGE_API_TOKEN_ABS: $(STORAGE_API_TOKEN_ABS)
              STORAGE_API_TOKEN_MASTER: $(STORAGE_API_TOKEN_MASTER)
              STORAGE_API_TOKEN_READ_ONLY: $(STORAGE_API_TOKEN_READ_ONLY)
              RUNNER_MIN_LOG_PORT: $(RUNNER_MIN_LOG_PORT)
              RUNNER_MAX_LOG_PORT: $(RUNNER_MAX_LOG_PORT)
